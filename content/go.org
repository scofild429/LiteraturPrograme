#+TITLE:  Go
#+OPTIONS: num:nil
#+STARTUP: overview
* print
#+begin_src go :results output :exports both
  package main
  import "fmt"
  func main() {
      a := [...]int{1,2,3,4,5}
      b := a
      b[1] = 50
      fmt.Println(a)
      fmt.Println(b)
  }
#+end_src

#+RESULTS:
: [1 2 3 4 5]
: [1 50 3 4 5]

* time
#+begin_src go :results output :exports both
  package main
  import (
      "fmt"
      "time"
  )
  func test() {
      start := time.Now()
      sum := 0
      for i := 0; i < 100000; i++ {
          sum++
      }
      elapsed := time.Since(start)
      fmt.Println("该函数执行完成耗时：", elapsed)
  }

  func main() {
      test()
  }

#+end_src

#+RESULTS:
: 该函数执行完成耗时： 38.669µs

* sync
#+begin_src go :results output :exports both
  package main
  import (
      "fmt"
      "time"
      "sync"
  )
  func main() {
      var wg sync.WaitGroup
      wg.Add(1)

      go func(){
          count("Sleep")
          wg.Done()
      }()
      wg.Wait()
  }

  func count(thing string) {
      for i := 1; i <= 5; i++ {
          fmt.Println(i, thing)
          time.Sleep(time.Millisecond*500)
      }

  }
#+end_src

#+RESULTS:
: 1 Sleep
: 2 Sleep
: 3 Sleep
: 4 Sleep
: 5 Sleep

