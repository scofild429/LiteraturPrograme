#+TITLE:  Go
#+OPTIONS: num:nil
#+STARTUP: overview
* print
#+begin_src go :results output :exports both
  package main
  import "fmt"
  func main() {
      a := [...]int{1,2,3,4,5}
      b := a
      b[1] = 50
      fmt.Println(a)
      fmt.Println(b)
  }
#+end_src

#+RESULTS:
: [1 2 3 4 5]
: [1 50 3 4 5]

* time
#+begin_src go :results output :exports both
  package main
  import (
      "fmt"
      "time"
  )
  func test() {
      start := time.Now()
      sum := 0
      for i := 0; i < 100000; i++ {
          sum++
      }
      elapsed := time.Since(start)
      fmt.Println("该函数执行完成耗时：", elapsed)
  }

  func main() {
      test()
  }

#+end_src

#+RESULTS:
: 该函数执行完成耗时： 33.536µs

* sync
#+begin_src go :results output :exports both
  package main
  import (
      "fmt"
      "time"
      "sync"
  )
  func main() {
      var wg sync.WaitGroup
      wg.Add(1)

      go func(){
          count("Sleep")
          wg.Done()
      }()
      wg.Wait()
  }

  func count(thing string) {
      for i := 1; i <= 5; i++ {
          fmt.Println(i, thing)
          time.Sleep(time.Millisecond*500)
      }

  }
#+end_src

#+RESULTS:
: 1 Sleep
: 2 Sleep
: 3 Sleep
: 4 Sleep
: 5 Sleep

* go
#+begin_src go :results output :exports both
  package main
  import (
      "fmt"
      "time"
  )
  func main() {
      var times int
      go func() {
          for {
          }
      }()
      go func() {
          for {
          }
      }()
      go func() {
          for {
          }
      }()
      go func() {
          for {
          }
      }()
      for times = 0; times <= 10; times++ {
          fmt.Println("tick", times)
          time.Sleep(time.Second)
      }
  }

#+end_src

#+RESULTS:
#+begin_example
tick 0
tick 1
tick 2
tick 3
tick 4
tick 5
tick 6
tick 7
tick 8
tick 9
tick 10
#+end_example

* chan
#+begin_src go :results output :exports both
  package main
  import "fmt"
  func main() {
      // 创建一个整型带两个缓冲的通道
      ch := make(chan int, 2)
	
      // 给通道放入两个数据
      ch <- 0
      ch <- 1
	
      // 关闭缓冲
      close(ch)
      // 遍历缓冲所有数据, 且多遍历1个
      for i := 0; i < cap(ch)+1; i++ {
		
          // 从通道中取出数据
          v, ok := <-ch
		
          // 打印取出数据的状态
          fmt.Println(v, ok)
      }
  }
#+end_src

#+RESULTS:
: 0 true
: 1 true
: 0 false

* context
:PROPERTIES:
:ID:       2bf1c325-6a98-43be-815c-a41934b02756
:END:

#+begin_src  go :results output :exports both
  package main

  import (
      "fmt"
      "context"
      "time"
  )

  func enrichContext(ctx context.Context) context.Context {
      return context.WithValue(ctx, "request-id", "11212")

  }

  func doSomething(ctx context.Context){
      rID := ctx.Value("request-id")
      fmt.Println(rID)
      for {
          select {
          case <-ctx.Done():
              fmt.Println("times out")
              return
          default:
              fmt.Println("doing something cool")
          }
          time.Sleep(500*time.Millisecond)
      }
  }


  func main (){
      fmt.Println("Go Context example")
      ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)
      defer cancel()
      fmt.Println(ctx.Err())
      ctx = enrichContext(ctx)
      go doSomething(ctx)
      select {
      case <- ctx.Done():
          fmt.Println("Oh, no, Time is execeed the deadline")
          fmt.Println(ctx.Err())
      }
      time.Sleep(2*time.Second)
  }
#+end_src

#+RESULTS:
#+begin_example
Go Context example
<nil>
11212
doing something cool
doing something cool
doing something cool
doing something cool
Oh, no, Time is execeed the deadline
context deadline exceeded
times out
#+end_example

* gonum
** Test example
#+begin_src go :results output :exports both :tangle ./babel/main.go
  package main

  import (
          "fmt"

          "gonum.org/v1/gonum/blas/blas64"
          "gonum.org/v1/gonum/mat"
  )

  func main() {
          r := row{1, 2, 3, 4}
          c := column{1, 2, 3}

          var m mat.Dense
          m.Mul(c, r)

          fmt.Println(mat.Formatted(&m))
          n := c.RawVector().N
          inc := c.RawVector().Inc
          d := c.RawVector().Data
          fmt.Println(n)
          fmt.Println(inc)
          fmt.Println(d)

          u := mat.NewVecDense(3, []float64{1, 2, 3})
          v := mat.NewVecDense(3, []float64{4, 5, 6})
          fmt.Println("u :", u)
          fmt.Println("v :", v)

  }

  // row is a user-defined row vector.
  type row []float64

  // Dims, At and T minimally satisfy the mat.Matrix interface.
  func (v row) Dims() (r, c int)    { return 1, len(v) }
  func (v row) At(_, j int) float64 { return v[j] }
  func (v row) T() mat.Matrix       { return column(v) }

  // RawVector allows fast path computation with the vector.
  func (v row) RawVector() blas64.Vector {
          return blas64.Vector{N: len(v), Data: v, Inc: 1}
  }

  // column is a user-defined column vector.
  type column []float64

  // Dims, At and T minimally satisfy the mat.Matrix interface.
  func (v column) Dims() (r, c int)    { return len(v), 1 }
  func (v column) At(i, _ int) float64 { return v[i] }
  func (v column) T() mat.Matrix       { return row(v) }

  // RawVector allows fast path computation with the vector.
  func (v column) RawVector() blas64.Vector {
          return blas64.Vector{N: len(v), Data: v, Inc: 1}
  }

#+end_src

#+RESULTS:

** NewDense
#+begin_src go :tangle ./babel/main.go
  package main

  import (
          "fmt"
          "gonum.org/v1/gonum/mat"
  )

  func main() {
          zeros := mat.NewDense(3,5,nil)
          fmt.Println(zeros)
  }

#+end_src

#+RESULTS:

** make
#+begin_src go :tangle ./babel/main.go
  package main

  import (
          "fmt"
          "math/rand"
          "gonum.org/v1/gonum/mat"
  )

  func main() {
          data := make([]float64, 36)
          for i := range data {
                  data[i] = rand.NormFloat64()
          }
          a := mat.NewDense(6, 6, data)
          zeros := mat.NewDense(3,5,nil)
          // fmt.Println(mat.Formatted(zeros, mat.Prefix(""), mat.Squeeze()))
          // fmt.Println(mat.Formatted(a, mat.Prefix(""), mat.Squeeze()))
          eq := mat.Equal(a, zeros)
          fmt.Println(eq)

  }

#+end_src

** gonum execute  
#+begin_src sh :results output :exports both
  cd babel
  go mod init babel-go
  go mod tidy
  go build main.go
  rm main.go
  rm go.mod
  rm go.sum
  ./main
#+end_src

#+RESULTS:
: false

