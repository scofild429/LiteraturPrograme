#+Title: Postgresql
#+OPTIONS: num:nil
#+SETUPFILE: /home/si/.emacs.d/org-html-themes/org/theme-bigblow.setup
#+STARTUP: overview
* basic OP
** install
sudo apt install postgresql postgresql-contrib

** root terminal
this terminal ist not sufficient to program, but basic shell command can be executed
login into terminal: 
sudo -i -u postgres
terminal to psql:
psql
** root login into database
sudo -i -u postgres psql(postgres:  default user)
psql, login into psql user
if we login, we will be located in a table, which have the same name with user
** user login
psql -d test -U si -W
** set password
in database set password for user
\password user
** change database
\c database
** list all users
\du
** login out
\q

* src block
** with header
#+header: :engine postgresql
#+header: :dbhost localhost
#+header: :dbuser postgres
#+header: :dbpassword "ich"
#+header: :database postgres
#+begin_src sql 
create table personv (
 id int, 
 firstname varchar(50),
 lastname varchar(50),
 gender varchar(6),
 dataofbirth DATE
) ;
#+end_src
#+RESULTS:
| CREATE TABLE |
|--------------|
** with session
#+begin_src sql :engine postgresql :dbhost localhost :dbuser postgres :dbpassword ich :database postgres :dbport 5432
\l
#+end_src

#+RESULTS:
| List of databases     |          |          |             |             |                   |
|-----------------------+----------+----------+-------------+-------------+-------------------|
| Name                  | Owner    | Encoding | Collate     | Ctype       | Access privileges |
| postgres              | postgres | UTF8     | zh_CN.UTF-8 | zh_CN.UTF-8 |                   |
| si                    | postgres | UTF8     | zh_CN.UTF-8 | zh_CN.UTF-8 |                   |
| template0             | postgres | UTF8     | zh_CN.UTF-8 | zh_CN.UTF-8 | =c/postgres       |
| postgres=CTc/postgres |          |          |             |             |                   |
| template1             | postgres | UTF8     | zh_CN.UTF-8 | zh_CN.UTF-8 | =c/postgres       |
| postgres=CTc/postgres |          |          |             |             |                   |
| test                  | postgres | UTF8     | zh_CN.UTF-8 | zh_CN.UTF-8 |                   |

#+begin_src sql :engine postgresql :dbhost localhost :dbuser postgres :dbpassword ich :database postgres :dbport 5432
\d 
#+end_src

#+RESULTS:
| List of relations |         |       |          |
|-------------------+---------+-------+----------|
| Schema            | Name    | Type  | Owner    |
| public            | person  | table | si       |
| public            | personv | table | postgres |
* hpda solution
** 03-01
#+begin_src sql :engine postgresql :dbhost localhost :dbuser postgres :dbpassword du :database postgres :dbport 5432
    drop table if exists WikipediaArticles ;
    create table WikipediaArticles (
    id int,
    title varchar(50), 
    text varchar(50),
    category varchar(50),
    link int
    ) ;
    \d wikipediaarticles;
#+end_src

#+RESULTS:
| DROP TABLE                       |                       |           |          |         |
|----------------------------------+-----------------------+-----------+----------+---------|
| CREATE TABLE                     |                       |           |          |         |
| Table "public.wikipediaarticles" |                       |           |          |         |
| Column                           | Type                  | Collation | Nullable | Default |
| id                               | integer               |           |          |         |
| title                            | character varying(50) |           |          |         |
| text                             | character varying(50) |           |          |         |
| category                         | character varying(50) |           |          |         |
| link                             | integer               |           |          |         |


#+begin_src sql :engine postgresql :dbhost localhost :dbuser postgres :dbpassword du :database postgres :dbport 5432
  drop table if exists linkarticles ;
      create table linkarticles (
      id int,
      linked int
   ) ;
#+end_src

#+RESULTS:
| DROP TABLE   |
|--------------|
| CREATE TABLE |



#+begin_src sql :engine postgresql :dbhost localhost :dbuser postgres :dbpassword du :database postgres :dbport 5432
  delete from wikipediaarticles where id = 1;
  insert into WikipediaArticles (id, title, text, category, link) values (1, 'math', 'mathematics and nature and nature', 'nature', 1) ;
  delete from wikipediaarticles where id = 2;
  insert into WikipediaArticles (id, title, text, category, link) values (2, 'phy', 'physics', 'nature', 2) ;
  delete from wikipediaarticles where id = 3;
  insert into WikipediaArticles (id, title, text, category, link) values (3, 'chemie', 'chemistry', 'science', 3) ;
  delete from wikipediaarticles where id = 4;
  insert into WikipediaArticles (id, title, text, category, link) values (4, 'bio', 'biology', 'science', 4) ;
  select * from wikipediaarticles ;
#+end_src

#+RESULTS:
| DELETE 0   |        |                                   |          |      |
|------------+--------+-----------------------------------+----------+------|
| INSERT 0 1 |        |                                   |          |      |
| DELETE 0   |        |                                   |          |      |
| INSERT 0 1 |        |                                   |          |      |
| DELETE 0   |        |                                   |          |      |
| INSERT 0 1 |        |                                   |          |      |
| DELETE 0   |        |                                   |          |      |
| INSERT 0 1 |        |                                   |          |      |
| id         | title  | text                              | category | link |
| 1          | math   | mathematics and nature and nature | nature   |    1 |
| 2          | phy    | physics                           | nature   |    2 |
| 3          | chemie | chemistry                         | science  |    3 |
| 4          | bio    | biology                           | science  |    4 |


#+begin_src sql :engine postgresql :dbhost localhost :dbuser postgres :dbpassword du :database postgres :dbport 5432
  delete from linkarticles where id = 1;
  insert into Linkarticles (id, linked) values (1, 2) ;
  insert into Linkarticles (id, linked) values (1, 3) ;
  delete from linkarticles where id = 2;
  insert into Linkarticles (id, linked) values (2, 3) ;
  delete from linkarticles where id = 3;
  insert into Linkarticles (id, linked) values (3, 4) ;
  delete from linkarticles where id = 4;
  insert into Linkarticles (id, linked) values (4, 1) ;
  select * from linkarticles ;
#+end_src

#+RESULTS:
| DELETE 0   |        |
|------------+--------|
| INSERT 0 1 |        |
| INSERT 0 1 |        |
| DELETE 0   |        |
| INSERT 0 1 |        |
| DELETE 0   |        |
| INSERT 0 1 |        |
| DELETE 0   |        |
| INSERT 0 1 |        |
| id         | linked |
| 1          |      2 |
| 1          |      3 |
| 2          |      3 |
| 3          |      4 |
| 4          |      1 |


#+begin_src sql :engine postgresql :dbhost localhost :dbuser postgres :dbpassword du :database postgres :dbport 5432
select * from wikipediaarticles where title = 'phy';
#+end_src

#+RESULTS:
| id | title | text    | category | link |
|----+-------+---------+----------+------|
|  2 | phy   | physics | nature   |    2 |


#+begin_src sql :engine postgresql :dbhost localhost :dbuser postgres :dbpassword du :database postgres :dbport 5432
  select * from wikipediaarticles where id in
   (select linked from linkarticles where id in
    (select id from wikipediaarticles where title = 'math')
  );

#+end_src

#+RESULTS:
| id | title  | text      | category | link |
|----+--------+-----------+----------+------|
|  2 | phy    | physics   | nature   |    2 |
|  3 | chemie | chemistry | science  |    3 |


#+begin_src sql :engine postgresql :dbhost localhost :dbuser postgres :dbpassword du :database postgres :dbport 5432
  select count(*) , linked from linkarticles group by linked;
#+end_src

#+RESULTS:
| count | linked |
|-------+--------|
|     2 |      3 |
|     1 |      4 |
|     1 |      2 |
|     1 |      1 |


#+begin_src sql :engine postgresql :dbhost localhost :dbuser postgres :dbpassword du :database postgres :dbport 5432
  select unnest(string_to_array('this is is is a test', ' '))
#+end_src

#+RESULTS:
| unnest |
|--------|
| this   |
| is     |
| is     |
| is     |
| a      |
| test   |


#+begin_src sql :engine postgresql :dbhost localhost :dbuser postgres :dbpassword du :database postgres :dbport 5432
select id,  unnest(string_to_array(text , ' ')) as word, count(*) from WikipediaArticles group by id, word
#+end_src

#+RESULTS:
| id | word        | count |
|----+-------------+-------|
|  4 | biology     |     1 |
|  3 | chemistry   |     1 |
|  2 | physics     |     1 |
|  1 | nature      |     2 |
|  1 | and         |     2 |
|  1 | mathematics |     1 |



#+begin_src sql :engine postgresql :dbhost localhost :dbuser postgres :dbpassword du :database postgres :dbport 5432
  select * from wikipediaarticles where category = 'science';
#+end_src

#+RESULTS:
| id | title  | text      | category | link |
|----+--------+-----------+----------+------|
|  3 | chemie | chemistry | science  |    3 |
|  4 | bio    | biology   | science  |    4 |

** 03-02
#+BEGIN_SRC  dot :file ./foto/hpdas03-02.png
  digraph diagramm {
    WikipediaArticles  -> id
    WikipediaArticles  -> Title
    WikipediaArticles  -> Text
    WikipediaArticles  -> Category
    WikipediaArticles  -> Links
    Links  -> linkarticles
    linkarticles -> lid
    linkarticles -> linked
  }

#+END_SRC

#+RESULTS:
[[file:./foto/hpdas03-02.png]]

** 04-01
*** mapper and reducer in own
#+begin_src python
  def mapper(key, value):
    words = key.split()
    for word in words:
      Wmr.emit(word, 1)

  def mapper(key, value):
    words = key.split()
    for word in words:
      Wmr.emit("s", stem(word), 1)
    for word in words:
      Wmr.emit("l", lemmatize(word), 1)

    
  def reducer(key, values):
    count = 0
    for value in values:
      count += int(value)
      Wmr.emit(key, count)

#+end_src

*** sql
#+begin_src sh
  cat ~/Documents/hpda0404.csv 
#+end_src

#+RESULTS:
| num | germany | english | chinese | listed |
|   1 | eins    | one     | 一      |      1 |
|   2 | zwei    | two     | 二      |      1 |
|   3 | drei    | three   | 三      |      2 |
|   6 | sechs   | six     | 六      |      2 |

#+begin_src sql :engine postgresql :dbhost localhost :dbuser postgres :dbpassword du :database postgres :dbport 5432
  drop table if exists hpda0401 ;

  create table hpda0401 (
  num int,
  germany varchar(10),
  english varchar(10),
  chinese varchar(10),
  listed int
  ) ;

  insert into hpda0401 (num, germany, english, chinese, listed) values (1, 'eins', 'one','一', 1);
  insert into hpda0401 (num, germany, english, chinese, listed) values (2, 'zwei', 'two','二', 1);
  insert into hpda0401 (num, germany, english, chinese, listed) values (3, 'drei', 'three','三', 2);
  insert into hpda0401 (num, germany, english, chinese, listed) values (6, 'sechs', 'six','六', 2);

  select germany from hpda0401 where  germany = 'zwei';

  select listed, sum(num) as mysum from hpda0401 group by listed;
#+end_src

#+RESULTS:
| DROP TABLE   |       |
|--------------+-------|
| CREATE TABLE |       |
| INSERT 0 1   |       |
| INSERT 0 1   |       |
| INSERT 0 1   |       |
| INSERT 0 1   |       |
| germany      |       |
| zwei         |       |
| listed       | mysum |
| 2            |     9 |
| 1            |     3 |

*** select
#+begin_src python  :results output
  import csv
  from functools import reduce
  path = "/home/si/Documents/hpda0404.csv"
  data = []
  with open(path) as f:
      records = csv.DictReader(f)
      for row in records:
          data.append(row)
      print(data)


  mapiter = map(lambda x: x["germany"], data)
  maplist = [ele for ele in mapiter]
  print(maplist)    

  filteriter = filter(lambda x: x=="zwei", maplist)
  filterlist = [ele for ele in filteriter]
  print("select germany WHERE germany == zwei :", filterlist)

#+end_src

#+RESULTS:
: [{'num': '1', 'germany': 'eins', 'english': 'one', 'chinese': '一', 'listed': '1'}, {'num': '2', 'germany': 'zwei', 'english': 'two', 'chinese': '二', 'listed': '1'}, {'num': '3', 'germany': 'drei', 'english': 'three', 'chinese': '三', 'listed': '2'}, {'num': '6', 'germany': 'sechs', 'english': 'six', 'chinese': '六', 'listed': '2'}]
: ['eins', 'zwei', 'drei', 'sechs']
: select germany WHERE germany == zwei : ['zwei']

*** summation
#+begin_src python  :results output
  import csv
  from functools import reduce
  path = "/home/si/Documents/hpda0404.csv"
  data = []
  with open(path) as f:
      records = csv.DictReader(f)
      for row in records:
          data.append(row)
      print(data)


  iters = map(lambda x: x["listed"], data)
  iterslist = [ele for ele in iters]
  iterset = set(iterslist)
  print("grouped by ", iterset)

  dic = {}
  for i in iterset:
      temp = []
      for d in data:
          for (j, n) in [b for b in map(lambda x: (x["listed"],x["num"]), [d])]:
              if i == j:
                  temp.append(int(n))
      reduer = reduce(lambda x, y:x+y, temp)
      dic[i]= reduer

  print("sum (num) GROUP) BY listed : ", dic)
#+end_src

#+RESULTS:
: [{'num': '1', 'germany': 'eins', 'english': 'one', 'chinese': '一', 'listed': '1'}, {'num': '2', 'germany': 'zwei', 'english': 'two', 'chinese': '二', 'listed': '1'}, {'num': '3', 'germany': 'drei', 'english': 'three', 'chinese': '三', 'listed': '2'}, {'num': '6', 'germany': 'sechs', 'english': 'six', 'chinese': '六', 'listed': '2'}]
: grouped by  {'1', '2'}
: sum (num) GROUP) BY listed :  {'1': 3, '2': 9}

*** join
#+begin_src sh
  cat ~/Documents/hpda0404a.csv 
  cat ~/Documents/hpda0404b.csv
#+end_src

#+RESULTS:
| id | germany | english | chinese | listed |
|  1 | eins    | one     | 一      |      1 |
|  2 | zwei    | two     | 二      |      1 |
|  3 | drei    | three   | 三      |      2 |
|  6 | sechs   | six     | 六      |      2 |
| id | fan     |         |         |        |
|  1 | une     |         |         |        |
|  3 | trois   |         |         |        |
|  4 | quatre  |         |         |        |
|  8 | huit    |         |         |        |

#+begin_src python  :results output
  import csv
  from functools import reduce
  path1 = "/home/si/Documents/hpda0404a.csv"
  path2 = "/home/si/Documents/hpda0404b.csv"
  data1 = []
  with open(path1) as f:
      records = csv.DictReader(f)
      for row in records:
          data1.append(row)
      print(data1)

  data2 = []
  with open(path2) as f:
      records = csv.DictReader(f)
      for row in records:
          data2.append(row)
      print(data2)    


  for a in data1:
      aid = [y for y in map(lambda x: x["id"], [a])]
      for b in data2:
          bid = [y for y in map(lambda x: x["id"], [b])]
          if aid == bid:
              (af1, bf2) = ([y for y in map(lambda x: x["germany"], [a])], [y for y in map(lambda x: x["fan"], [b])])
              print(af1, bf2)

#+end_src

#+RESULTS:
: [{'id': '1', 'germany': 'eins', 'english': 'one', 'chinese': '一', 'listed': '1'}, {'id': '2', 'germany': 'zwei', 'english': 'two', 'chinese': '二', 'listed': '1'}, {'id': '3', 'germany': 'drei', 'english': 'three', 'chinese': '三', 'listed': '2'}, {'id': '6', 'germany': 'sechs', 'english': 'six', 'chinese': '六', 'listed': '2'}]
: [{'id': '1', 'fan': 'une'}, {'id': '3', 'fan': 'trois'}, {'id': '4', 'fan': 'quatre'}, {'id': '8', 'fan': 'huit'}]
: ['eins'] ['une']
: ['drei'] ['trois']

** 04-02
*** 01
#+begin_src python :results output
  from nltk.stem.snowball import SnowballStemmer
  from nltk.stem import WordNetLemmatizer

  stemmer = SnowballStemmer("english")
  lemmatizer = WordNetLemmatizer()

  file = "/home/si/Documents/hpda0402wordscount.txt"
  sdict = {}
  ldict = {}
  with open(file, "r") as data:
      datas = data.read()
      words = datas.split(' ')
      for word in words:
          sword = stemmer.stem(word)
          lword = lemmatizer.lemmatize(word)
          if sword in sdict:
              sdict[sword] += 1
          else:
              sdict[sword] = 1

          if lword in ldict:
              ldict[lword] += 1
          else:
              ldict[lword] = 1

      print("---------sdict----------------------")
      for (item, key) in sdict.items():
            print(item, key)

      print("---------ldict----------------------")
      for (item, key) in sdict.items():
          print(item, key)


#+end_src

#+RESULTS:
#+begin_example
---------sdict----------------------
word 43
count 20
from 2
wikipedia 1
the 39
free 1
encyclopedia
th 1
is 16
number 4
of 23
in 11
a 26
document 3
or 10
passag 1
text 6
may 8
be 9
need 1
when 3
text
i 1
requir 2
to 17
stay 1
within 1
certain 2
this 3
particular 1
case 1
academia 1
legal
proceed 1
journal 1
and 20
advertis 1
common 1
use 4
by 5
translat 2
determin 2
price 1
for
th 1
job 1
also 5
calcul 1
measur 3
readabl 1
typing
and 1
read 1
speed 1
usual 4
per 3
minut 1
convert 1
charact 3
five 1
or
six 1
general 2
content 1
detail 2
variat 3
definit 5
softwar 4
fiction
in 1
non 2
fiction 4
see 1
refer 3
sourc 3
extern 1
link 1
definition
thi 1
section 3
doe 1
not 2
cite 1
ani 2
pleas 1
help 1
improv 1
ad 1
citat 1
to
reli 1
unsourc 1
materi 1
challeng 1
removed
vari 1
oper 2
how 2
can 5
occur 1
name 2
what 1
as 10
and
which 1
don't 2
toward 2
total 2
howev 3
especi 1
sinc 1
advent 1
widespread 1
process 4
there
i 1
broad 2
consensus 2
on 7
these 3
henc 1
bottom 1
line 3
integ 1
result
th 1
accept 2
segment 3
rule 6
found 1
most 4
includ 3
how
word 1
boundari 2
are 4
which 3
depend 4
divid 2
defin 2
first 1
trait 1
that 5
space 3
various 1
whitespace
charact 1
such 7
regular 1
an 4
em 1
tab 1
hyphen 2
slash 1
too
differ 1
program 3
give 2
vari 4
result 2
rule
detail 2
whether 1
outsid 1
main 1
footnot 2
endnot 2
hidden 2
text) 1
but 3
behavior
of 1
major 1
applic 2
similar 1
dure 1
era 2
school 1
assign 1
were 3
done 1
in
handwrit 1
with 2
typewrit 1
for 9
often 3
differ 2
today 1
consensus
most 1
import 2
mani 2
student 2
drill 1
articl 1
but
sometim 1
other 1
conjunct 1
exampl 2
some 1
preposit 1
permanent
compound 1
follow 2
up 1
noun 1
long 1
term 1
adject 1
one 1
save 1
time 1
effort 1
counting
word 1
thumb 1
averag 1
was 1
10 1
rules
hav 1
fallen 1
waysid 1
featur 1
text
segment 1
mention 1
earlier 2
now 1
standard 1
arbit 1
becaus 2
it 5
larg 2
consist 1
across 1
and
appl 1
fast 1
effortless 1
costless 1
alreadi 1
of
a 1
abstract 1
list 2
bibliographi 1
tabl 1
figure
capt 1
person 1
charg 1
teacher 1
client 1
their 1
choic 1
user 1
worker 1
simply
select 1
exclud 1
element 1
accord 1
watch 1
automat 1
updat 1
modern 1
web 1
browsers
support 1
via 2
extens 1
javascript 1
bookmarklet 1
script 1
host 1
websit 1
word
processor 1
unix 1
like 1
system 1
wc 1
specif 1
counting
a 1
explain 1
exact 1
strict 1
thus 1
acceptable
in 1
novelist 1
jane 1
smiley 2
suggest 1
length 7
qualiti 1
novel 8
vary
tremend 1
typic 1
between 2
while 3
nation 1
write 1
month
requir 1
at 3
least 1
there 1
no 1
firm 1
novella 2
novel
i 1
arbitrari 1
literari 1
work 1
difficult 1
categoris 1
extent 1
up
to 1
writer 2
subgenr 1
chapter 1
book 1
children 1
start 1
about 1
a
typ 1
mysteri 1
might 1
rang 1
thriller 1
could 1
over 2
words
th 1
scienc 1
fantasi 1
america 1
specifi 1
each 1
categori 1
nebula 1
award 1
categories
classification	word 1
novelett 1
short 1
stori 1
under 1
words
in 1
academ 1
dissert 2
great 1
predomin 1
subject
numer 1
american 1
univers 1
limit 1
ph.d. 1
bar 1
special 1
permiss 1
exceed 1
limit
 1
---------ldict----------------------
word 43
count 20
from 2
wikipedia 1
the 39
free 1
encyclopedia
th 1
is 16
number 4
of 23
in 11
a 26
document 3
or 10
passag 1
text 6
may 8
be 9
need 1
when 3
text
i 1
requir 2
to 17
stay 1
within 1
certain 2
this 3
particular 1
case 1
academia 1
legal
proceed 1
journal 1
and 20
advertis 1
common 1
use 4
by 5
translat 2
determin 2
price 1
for
th 1
job 1
also 5
calcul 1
measur 3
readabl 1
typing
and 1
read 1
speed 1
usual 4
per 3
minut 1
convert 1
charact 3
five 1
or
six 1
general 2
content 1
detail 2
variat 3
definit 5
softwar 4
fiction
in 1
non 2
fiction 4
see 1
refer 3
sourc 3
extern 1
link 1
definition
thi 1
section 3
doe 1
not 2
cite 1
ani 2
pleas 1
help 1
improv 1
ad 1
citat 1
to
reli 1
unsourc 1
materi 1
challeng 1
removed
vari 1
oper 2
how 2
can 5
occur 1
name 2
what 1
as 10
and
which 1
don't 2
toward 2
total 2
howev 3
especi 1
sinc 1
advent 1
widespread 1
process 4
there
i 1
broad 2
consensus 2
on 7
these 3
henc 1
bottom 1
line 3
integ 1
result
th 1
accept 2
segment 3
rule 6
found 1
most 4
includ 3
how
word 1
boundari 2
are 4
which 3
depend 4
divid 2
defin 2
first 1
trait 1
that 5
space 3
various 1
whitespace
charact 1
such 7
regular 1
an 4
em 1
tab 1
hyphen 2
slash 1
too
differ 1
program 3
give 2
vari 4
result 2
rule
detail 2
whether 1
outsid 1
main 1
footnot 2
endnot 2
hidden 2
text) 1
but 3
behavior
of 1
major 1
applic 2
similar 1
dure 1
era 2
school 1
assign 1
were 3
done 1
in
handwrit 1
with 2
typewrit 1
for 9
often 3
differ 2
today 1
consensus
most 1
import 2
mani 2
student 2
drill 1
articl 1
but
sometim 1
other 1
conjunct 1
exampl 2
some 1
preposit 1
permanent
compound 1
follow 2
up 1
noun 1
long 1
term 1
adject 1
one 1
save 1
time 1
effort 1
counting
word 1
thumb 1
averag 1
was 1
10 1
rules
hav 1
fallen 1
waysid 1
featur 1
text
segment 1
mention 1
earlier 2
now 1
standard 1
arbit 1
becaus 2
it 5
larg 2
consist 1
across 1
and
appl 1
fast 1
effortless 1
costless 1
alreadi 1
of
a 1
abstract 1
list 2
bibliographi 1
tabl 1
figure
capt 1
person 1
charg 1
teacher 1
client 1
their 1
choic 1
user 1
worker 1
simply
select 1
exclud 1
element 1
accord 1
watch 1
automat 1
updat 1
modern 1
web 1
browsers
support 1
via 2
extens 1
javascript 1
bookmarklet 1
script 1
host 1
websit 1
word
processor 1
unix 1
like 1
system 1
wc 1
specif 1
counting
a 1
explain 1
exact 1
strict 1
thus 1
acceptable
in 1
novelist 1
jane 1
smiley 2
suggest 1
length 7
qualiti 1
novel 8
vary
tremend 1
typic 1
between 2
while 3
nation 1
write 1
month
requir 1
at 3
least 1
there 1
no 1
firm 1
novella 2
novel
i 1
arbitrari 1
literari 1
work 1
difficult 1
categoris 1
extent 1
up
to 1
writer 2
subgenr 1
chapter 1
book 1
children 1
start 1
about 1
a
typ 1
mysteri 1
might 1
rang 1
thriller 1
could 1
over 2
words
th 1
scienc 1
fantasi 1
america 1
specifi 1
each 1
categori 1
nebula 1
award 1
categories
classification	word 1
novelett 1
short 1
stori 1
under 1
words
in 1
academ 1
dissert 2
great 1
predomin 1
subject
numer 1
american 1
univers 1
limit 1
ph.d. 1
bar 1
special 1
permiss 1
exceed 1
limit
 1
#+end_example
*** 02



