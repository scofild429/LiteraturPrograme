#+TITLE: Cloud Service Computing
#+OPTIONS: num:nil
#+STARTUP: overview
* Cloud computation
** Platform Virtualization
*** Defination of Virtualization
the processes of creating software-based version of resources.
*** The reasons for applying virtualization
- *Utilization*: Server consolidation
- *Isolation*: Implication of errors is restricted in virtual resource only
- *Flexiblity*: many Application access the same physical Hardware
- *On-demand*: virtual resource is created/destoryed on request
- *Migration*: Fault tolerance, live update, optimization of performance
- New reaserch:new OS new technology
- Encapsulation: current stats can be saved  copied and loaded
- Minimal downtime
- Fast provisioning
  
*** Full virtualization (Hypervisor system, Bare matal)
- Translation of instructions
- implantation: Virtual Box
- Hypervisor receive the IO from application,and translate to HW
- Hypervisor translate the request from Guest OS to HW
- no need special HW support  
- no need modified OS

*** Hardware-assisted virtualization (Hypervisor system, Bare matal)
- implantation: VMware Workstation
- can install many virtual machine
- need special HW support
- no need modified OS

*** Para virtualization (Hypervisor system, Bare matal)

- VM(modified OS) runs on Host
- Host on hypervisor
- implantation: linux kernel
  
- need modified OS
- need Host OS level on hypervisor

*** Host OS virtualization (Hypervisor system, Hosted)
- Guest OS on Hypervisor
- Hypervisor on Host OS
- Host on HW
  

- no need modified OS
- need Hypervisor on Host OS
- inter VM communication is difficult


*** OS-level virtualization (Container system)
- no hypervisor
- multiple useer instances(light-weight) run on a host OS
- implantation: Docker

*** Memory virtualization
- shadow page table on Guest OS 
- Extended Page table in Host
*** Network virtualization
hypervisor provide virtual switch, offering every VM a ip address
*** Feathers
| Encapsulation        |
| solation             |
| Hardware abstraction |
| Migration            |
| Partation            |

** Docker
*** old note
|--------------------------------------------+-----------------|
| comands                                    | expains         |
|--------------------------------------------+-----------------|
| docker images                              | 查看容器        |
| docker pull nginx  [fn:nginx]              | 新增            |
| docker run -d -p 80:80 nginx [fn:docker-v] | 开始，id， 后台 |
| docker exec -it xxxxxx bash                | 前台进入，      |
| docker commit xxxxxx newname               | 生成新容器      |
| docker kill -s KILL xxxxxx                 | 关闭            |
|--------------------------------------------+-----------------|


[fn:nginx] 对于新到手的项目可以直接放到容器的nginx根目录（快速部署 /usr/share/nginx/html），可以在映射的
本机端口进入


[fn:docker-v] to my case:
#+begin_src 
sudo docker run -d -p 80:80 -v /home/sx/Documents/Java/ANANProject/layuimini/:/usr/share/nginx/html/ nginx
#+end_src

Beispile
#+begin_src 

sudo docker images
sudo docker pull nginx
sudo docker run -d -p 80:80 nginx -> id:xxxxxxx
sudo docker exec -it -v /....../project:/usr/share/nginx/html xxxxxxx
build in - > local host :80  
#+end_src
*** commands

- docker pull NAME

- docker images
- docker images -a
  
- docker run NAME
- docker run NAME:VERSION
- docker run -d NAME
- docker run -p6000:6379 -d redis
- docker run -p6000:6379 -d  --name redis-older redis

- docker exec -it ID /bin/bash
- docker exec -it NAME /bin/bash

  
- docker ps
- docker ps -a2

- docker start ID
- docker stop ID

- docker logs ID
  
*** discripation
| fast delivery         |
| easy deploy and scale |
| run more workloads    |
| easy management       |
| lightweight image     |
| No guest OS           |

- Disadvanage: can not change kernel
- Less secure than VM

- Docker Registry hold Docker Images
- Docker Images create Docker Container(run as instance)
- Docker Container runs applications
- the shared levels are readonly, and containers communicate with sockets or Restful API
** Kubernetes
Container-Orchestration System 
- Cluster
- Control Plane
- Workload:application on Kubernetes
- Pod: many containers share the same volume
- Deployment
- Service

** Virtual Machine
- Partition
- Isolation
- Encapsulation
- Hardware abstraction
- Live Migration

** Storage Virtualization
*** SSD advantage and disadvanage over HDD
- Reliablity
- Fast
- small Size

- More expensive
- less Space

*** Storage virtualization advantage
- Faster access: because you can have multiple data sources for the same data
- Independence of logic storage resources
- improvement of management: Moving data easy, in multiple localaction
- High reliablity:  because of Redundancy
- High effience: Replication and Duplication
- compression, compaction
- increasing volume if needed

*** Provisioning:
- allocate disk space to user on demand
- give a mount of Storage, but not really allocated so much

*** Deduplication
  Single instance Storage: 
  if the hash value of a datablock is the same with one we already stored,
  dann save its link
  - checksum with hash value
   
*** Compression:
compacting the data so that it comsumes less space
*** Cloning
Consuming no storage except what is required for metadata until changes
are written to the copy
*** Snapshotting Copies
a read-only, point-in-time image of a volume
*** increasing the proformance
with more physical disks at the same time
** Modern Datacenters
*** automation
- scaling
- Inreases Repeatablity
- Make processes Faster
- imporve Reliablity

- disadvanage
  Additional Complexity
  illusion of Stability

*** Idempotent
the same code generate the same result, without any change

*** Infrastructure as code
- Benefits:
  + Repeatablity
  + Agility
  + Disaster Recovery
  + fast deploy
  + live upgrade
  
- Imperative:describe the stes to get to desired state
- Declarative: describe the desired state

*** Foreman:
give the initial configuration to run an OS
*** Puppet
- Declarative description of resource states
- Client / server Architecture
- Security throgh cettificate
- OS abstraction
** Monitor
*** challange
collecte data from large mount of servers
Watch out the overhitting
*** Real time monitoring
- Availability Monitoring: altering of failure
- Capacity Monitoring: detect outages of resource
*** Historical Monitoring
- Long-term information
- Trend analysis
- Capacity planning
*** Architecture
- Measurement: Blackbox, Whitebot,Gauges, Conntes
- Collection: push, pull
- Analysis: real time, short term, long term, Anomaly detection with AI
- Alerting:
- Virtualization
  
** Cloud Computing Concepts
*** Cloud Defination
#+begin_src 
Cloud Computing is a model for enabling on-demand network
access to a shared pool of configurable computing resource
(network, server, storage, application, service) that can
be rapidly provisioned and released with minimal management
effort or service provider interaction
#+end_src


*** SOA
Servive Oriented Architecture
SOA has become a core concept of service computing and provides the
fundamental technologies for realizing service computing
*** Advantage
- No captial costs
- High scalability
- Highh Flexiblity

*** Network design
Different: SDN: software define Network
New architectures have a detached control plane
instead of heavy logic switching/routing in hardware
- hardware independent
- better shaping and Qos(Quit of service)
- Data Center Briding for local and remote network
*** GWDG feathers
- self service front-end
- SSH authenticate
- snapshotting
- using Openstack


*** Infrastructure as Service
**** Different deployment methode
| Private Cloud   |
| community Cloud |
| public Cloud    |
| Hybird Cloud    |
**** Storage
CDMI: Cloud Data Management Interface
File, Block Devices, Object Stores, Database Store
example: AWS S3
**** Network
**** advantage
- quick implement of new project
- Flexiblity and scalability
- no hardware costs
- pay only what you need
**** disadvantage
- complicated to change provider
- dependency on provider
- internet access is essential

*** Platform as a Service
- Rapid Time-to-Market
- Minimal Development
- Reduced Pressure on internal resources


*** Software as a Service
based on IaaS, fouce on Applications

** Web services
*** Benefits
- Programmable access
- Distribution over internet
- Encapsulation of discrete functionality
- can offer stardartized Interface
  + TCP/IP prokotoll
  + HTTP based
*** SOAP
Simple Object Access Protocol
xml based
RPC based
*** WSDL
Web Services Description Language
xml based

*** REST
+ Everything is resource
+ Every resource is identified by a unique Identifier
+ Using simple and uniform interface
+ Communication is done by representation
+ be stateless

- more flexiblity
- less redundancy, raw message based
- URI and URL

*** API
Application Programming Interface

** Big Data Service
*** feathers
- Volume: Scale of data
- Velocity : spend of transfer data
- Variety: Different form of data
- Veracity: Uncertainty of data
*** processes
- Acquisition, Recording
- Extraction, Cleaning, Annotation
- Integration, Representation
- Analysis, Modeling
- Interpretation, Virtualization
*** Challenges
- Heterogeneity, Incompleteness
- Scale
- Timeliness
- Privacy
** Mapreduce
| map       | map the data into key-value-pairs according to our problem |
| reduce    | key-value-pairs get accumlated                             |
| shuffling |                                                            |
** Large Scale Data Analysis
*** batch process
disadvanage: views generated in batch may out of date
*** steaming process
disadvanage: expensive and complex
*** Stream Computation Platform
- Apache Storm
- Spark Streaming
- Apache Flink
- Heron
*** Hadoop
*** HDFS
Namenode vs DataNodes
*** YARN
Resource Manager vs NodeManager
*** Apache Kafka
- Fast, efficient IO
- Fault tolerant storage
- Publish and Subscribe to steams of records
*** Data management cycle
- Data
- Meta-data
- PID
- Search
- Disposition
** Data Grid Data Management
*** Data Lake
A data lake is a data storage, where raw data can be stored,
whos structure is determined at the extraction from the lake
**** Challenges
- Reliablity
- Slow Performance
- Lack of security
**** Zones
- Transient
- raw
- trusted
- refined
*** ETL
Extract transform load
*** Storage data in Multiable locations
Redundancy for high-availability because of server falied and
fast access of data
*** Storage data in remote data center
it is harder to acidentally delete something, such as because
of disaster.
*** code storage
ssd
*** fair data management
Find-able Accessable Interoperable Reproducible

** ITIL &SLA
*** non functional service
organizational Operation of server
server quality like availability
usability

server
value
value co-creation
IT service Management
IT service Provider

*** ITIL Information Technology Infrastructure Library
a framework of best practices of IT service management and delivering 
**** service value system SVS
***** Guiding principles
- focus on value
- start where you are
- progress iteratively with feedback
- collaborate and promote visibility
- think and work holistically
- keep in simple and practical
- optimize and automate
  
***** Service Value Chain
  - plan
  - improve
  - engage
  - design
  - transition
  - obtain
  - deliver

***** ITIL Practices
**** the four dimensions model
Organization&People
Information & Technology
Value streams&Processes
Partners&suppliers
*** SLA Service Level Agreement Life cycle
- Development
- Negotiation
- Implementation
- Execution
- Assessment 
- Termination
*** SLA components include
- Parties,  terms,  conditions
- service defination include costs
- Performance parameters
- what is measured, how and when(monitoring)
- what is done to in case a SLA is voilated

** Security
*** Confidentiality
The ability to hide the information from the unauthorized people
*** Integrity
The ability to ensure that data are unchanged and remain a correct representation of original data
*** Availablity
data is available to authorized people
*** Asymmetric Encrytion RSA
#+begin_src 
Meassage: M
Content: N
Ciphertext: C
Public key: E
Encryption: E(x)
private key: D
Decryption: D(x)

RSA Algorithm
1. Select two prime number, p[13] and q[17]
2. Generate Algorithm content N[221]: N = q*p
3. calcalete the Eular function [192]: $\varphi(N)=(p-1)*(q-1)$
4. Rondomly generate public key e[5]: and e is relatively prime with $\varphi(N)$
5. calcalete the private key d[77]: so that $e*d =1$  mod $\varphi(N)$
6. pack Public key E = (n, e) and publish to someone
7. save Private key D =(n, d) 

Someone want to some me Mesaage M: [12]
Encryption: $C = M^{e}$ mod n  [207]
send C [207] to me 

I do the Decryption
Message M: $M=C^{d}$ mod n  [207**77%221]
get the Mesaage [12]
#+end_src
*** security benefits
- Integrity
- authentify the sender
- non deniable for message
*** symmetric encryption
- challange of key exchange
- en/decryption with the same key
*** asymmetic encryption
- en/decryption need more resource
- safe key exchange
*** Digital Signiture
It's a certificate to identify the sender of message
*** how Certificate is trusted
OS deliver a list of  already trusted accepted CAs, it's preconfigured
*** Authentication
verifies you are who you say you are
*** Authorization
verifies if you have the permission to access data
*** Confusion and Diffusion
confusion is to create faint ciphertexts in crytoprahic
Diffusion, if one place of plain text the modified, many places can be modified

* Paraiell computation
** Chap1: introduction
*** Von Nroven
cpu, interconnection, memory

*** memory mode
shared memory
distributed memory
*** shared memory
easy to build ,hard to large scare
*** distribution memory
** Chap 2: Proformance
CPI: cycles per instruction
MIPS: Million Instructions per second
FLOPS: Floating Point Operation per second

Benchmark
idle

Does this also mean in a hundred percent parallel code ,
the speed up is proportional to the number of threads?
- Yes
fashion
inductive

$$T_{serial}$$:  The Time for task which can't be parallelized.
$$T_{parallel}$$: The Time for task which can be parallelized.
$$p$$: number of processes
$$P$$: Precent of Task, which can be parallelized

*** single Process:
$$T_{parallel} = \frac{T_{serial}}{p}$$
speedup: $$S = \frac{T_{serial}}{T_{parallel}}$$.
if the parallelized part are perfect parallelable, $S==p$.
*** Multi processes
$$T_{parallel} = (1-P)T_{serial} +  \frac{P \cdot T_{serial}}{p}$$

speedup: $$S = \frac{T_{serial}}{T_{parallel}} = \frac{1}{(1-P)+ \frac{P}{p}}$$. 
$$S = \lim_{p -> \infty}\frac{1}{(1-P)+ \frac{P}{p}} = \frac{1}{1-P}$$

*** Efficient
$$E = \frac{S}{p}$$

*** Adaes-low
*** Gustafon low
$$ S_{p} = \frac{T_{serial} -p T_{paralle}}{T_{seria} + T_{parallel}}$$



* AWS
* Alibaba
* GWDG
1. as student of Göttingen send email to support@gwdg.de with uni email, asking for freischaltung of cloud server  
2. got https://gwdg.de Dienst-> GWDG cloud server -> self service create Instance
   if with my ssh, the connect can be without password, but still need to aktiv
3. where the instance is created, use the VNS to aktiv the konto, remember to save the password
   ssh cloud@ip

